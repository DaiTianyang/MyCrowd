package com.atguigu.crowd.util;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.util.EntityUtils;

import com.aliyun.api.gateway.demo.util.HttpUtils;
import com.atguigu.crowd.mvc.constant.CrowdConstant;

/**
 * 判断当前请求是否为Ajax请求
 * 
 * true:当前请求是Ajax请求 false:当前请求不是Ajax请求
 * 
 * @author User
 *
 */
public class CrowdUtil {

	
	/**
	 * 
	 * String host = "https://smssend.shumaidata.com";
	 * String path = "/sms/send";
	 * String method = "POST";
	 * String appcode = "e28d67887269409a851de4fb3c50d02a";
	 * @param host				https://smssend.shumaidata.com
	 * @param path				/sms/send
	 * @param method			POST
	 * @param appcode			e28d67887269409a851de4fb3c50d02a
	 * @param phone				15645693659
	 * @param templatedId		"M09DD535F4"
	 * @return
	 */
	public static ResultEntity<String> sendCodeByShortMessage(String host,String path,String method,
			String appcode,String phone,String templatedId){
	    Map<String, String> headers = new HashMap<String, String>();
	    //最后在header中的格式(中间是英文空格)为Authorization:APPCODE 83359fd73fe94948385f570e3c139105
	    headers.put("Authorization", "APPCODE " + appcode);
	    Map<String, String> querys = new HashMap<String, String>();
	    //生成六位随机验证码
	    StringBuilder stringBuilder = new StringBuilder();
	    for (int i = 0; i < 6; i++) {
	    	 int random = (int) (Math.random()*10);
	    	 stringBuilder.append(random);
		}
	    String code = stringBuilder.toString();
	    querys.put("receive", phone);
	    querys.put("tag", code);
	    querys.put("templateId", templatedId);
	    Map<String, String> bodys = new HashMap<String, String>();

	    try {
	    	/**
	    	* 重要提示如下:
	    	* HttpUtils请从
	    	* https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/src/main/java/com/aliyun/api/gateway/demo/util/HttpUtils.java
	    	* 下载
	    	*
	    	* 相应的依赖请参照
	    	* https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/pom.xml
	    	*/
	    	HttpResponse response = HttpUtils.doPost(host, path, method, headers, querys, bodys);
	    	
	    	StatusLine statusLine = response.getStatusLine();
	    	
	    	int statusCode = statusLine.getStatusCode();
	    	
	    	String reasonPhrase = statusLine.getReasonPhrase();
	    	if (statusCode == 200) {
				return ResultEntity.successWithoutData();
			}
	    	System.out.println(response.toString());
	    	//获取response的body
	    	System.out.println(EntityUtils.toString(response.getEntity()));
	    	return ResultEntity.failed(reasonPhrase)
	    } catch (Exception e) {
	    	e.printStackTrace();
	    }
		return null;
	}
	public static String md5(String source) {

		// 1.判断source是否有效
		if (source == null || source.length() == 0) {

			// 2.如果不是有效的字符串抛出异常
			throw new RuntimeException(CrowdConstant.MESSAGE_STRING_INVALIDATE);
		}

		// 3.获取MessageDigest对象
		String algorithm = "md5";
		try {
			MessageDigest messageDigest = MessageDigest.getInstance(algorithm);

			// 4.获取明文字符串对应的字节数组
			byte[] input = source.getBytes();

			// 5.执行加密
			byte[] output = messageDigest.digest(input);

			// 6.创建BigInteger对象
			int signum = 1;
			BigInteger bigInteger = new BigInteger(signum, output);

			// 7.按照16进制将BigInteger的值转换为字符串
			int radix = 16;
			String encoded = bigInteger.toString(radix);

			return encoded;
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static boolean judgeRequestType(HttpServletRequest request) {

		String acceptHeader = request.getHeader("Accept");
		String xRequestHeader = request.getHeader("X-Requested-With");

		return (acceptHeader != null && acceptHeader.contains("application/json")

				||

				xRequestHeader != null && xRequestHeader.equals("XMLHttpRequest"));
	}
}
